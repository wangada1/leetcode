/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
 //这样取数对：在取好第l对，分别取i j的情况下，第l+1对一定是（i,j+1)和(i+1,j)当中更小的一对
 //这样取数是错误的，因为不能保证i和j之前的没有使用的组合一定比上述两个组合大；
 /*
//官方的代码特别复杂，以后再来学习吧
int** kSmallestPairs(int* nums1, int nums1Size, int* nums2, int nums2Size, int k, int* returnSize, int** returnColumnSizes){
    
    if(k>nums1Size*nums2Size){
        int** res = malloc(sizeof(int*)*(nums1Size*nums2Size));
        int res_count = 0;
        for(int i =0;i<nums1Size*nums2Size;i++){
            res[i] = malloc(sizeof(int)*2);
        };
        for(int i=0;i<nums1Size;i++){
            for(int j=0;j<nums2Size;j++){
                res[res_count][0] = nums1[i];
                res[res_count][1] = nums2[j];
                res_count++;
            }
        }
        *returnSize = nums1Size*nums2Size;
        *returnColumnSizes = malloc(sizeof(int)*(*returnSize));
        for(int i =0;i<*returnSize;i++){
        (*returnColumnSizes)[i] = 2;
    };
        return res;
    };

    int** result = malloc(sizeof(int*)*k);  
    for(int i=0;i<k;i++){
        result[i] = malloc(sizeof(int)*2);
    };
    
   int* i=&nums1[0];
    int* j=&nums2[0];
    result[0][0] = *i;
    result[0][1] = *j;
    int count=1; 
    while(count<k){
        if(i==&nums1[nums1Size-1]) {j =j+1;i=&nums1[0];}
        else if(j==&nums2[nums2Size-1]) {i=i+1;j=&nums2[0];}
        else if((*i + (*(j+1)))<=(*(i+1)+*j)) {j = j+1; }
        else { i = i+1;};
        result[count][0] = *i;
        result[count][1] = *j;
        count++;
    }
    *returnSize = k;
    *returnColumnSizes = malloc(sizeof(int)*(*returnSize));
    for(int i =0;i<*returnSize;i++){
        (*returnColumnSizes)[i] = 2;
    };
    return result;

}*/
